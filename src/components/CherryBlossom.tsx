// @ts-nocheck
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 public/cherry_blossoms/scene.gltf -t -r public/ 
Author: Nommoc (https://sketchfab.com/kikumi)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/cherry-blossoms-9d1dda78f1524c33b749015f21c0b845
Title: Cherry Blossoms
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import { GLTF } from "three-stdlib";

type GLTFResult = GLTF & {
  nodes: {
    ["03001_petal03_0"]: THREE.Mesh;
    ["03001_petal02_0"]: THREE.Mesh;
    ["03001_petal01_0"]: THREE.Mesh;
  };
  materials: {
    petal02: THREE.MeshStandardMaterial;
    petal03: THREE.MeshStandardMaterial;
    petal01: THREE.MeshStandardMaterial;
  };
  animations: [];
};

export function CherryBlossom(props: TSX.IntrinsicElements["group"]) {
  const ref = useRef();

  useFrame((state, delta) => {
    const y = ref.current?.position.y + -delta * 2;

    const rotX = ref.current?.rotation.x + delta;
    const rotY = ref.current?.rotation.y + delta;
    const rotZ = ref.current?.rotation.z + delta;

    ref.current?.position.setY(y);
    ref.current?.rotation.set(rotX, rotY, rotZ);
  });

  const { nodes, materials } = useGLTF(
    "/cherry_blossoms/scene.gltf"
  ) as GLTFResult;

  console.log("ref", ref);
  return (
    <group ref={ref} {...props} dispose={null}>
      <mesh
        geometry={nodes["03001_petal03_0"].geometry}
        material={materials.petal03}
      />
      <mesh
        geometry={nodes["03001_petal02_0"].geometry}
        material={materials.petal02}
      />
      <mesh
        geometry={nodes["03001_petal01_0"].geometry}
        material={materials.petal01}
      />
    </group>
  );
}

useGLTF.preload("/cherry_blossoms/scene.gltf");
